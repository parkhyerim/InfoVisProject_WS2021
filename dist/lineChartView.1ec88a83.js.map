{"version":3,"sources":["scripts/lineChartView.js"],"names":["svg","xAxis","yAxis","blDomainStorage","currentMonth","margin","top","right","bottom","left","width","height","VisualiseChosenBL","selectedBl","checked","selectedMonth","foundBL","foundMonth","console","log","forEach","arr","i","splice","fetchData","then","data","neededYValue","d3","scaleLinear","domain","max","item","Infos","AnzahlFall","sort","a","b","length","select","remove","addAxes","push","Bundesland","blClassN","visualiseCurve","updateExistingCurvesCircles","selectAll","InitializeSVG","append","classed","attr","bundesland","fetch","method","response","json","casesData","feed","features","elem","attributes","groupDataByDate","groupedReport","reduce","dataEntries","currentValue","day","Date","undefined","IdBundesland","reportArr","Object","entries","key","value","Meldedatum","scaleTime","extent","range","xA","axisBottom","tickSizeOuter","parseDate","timeFormat","tickFormat","d","call","style","nice","axisLeft","formattedData","classN","color","datum","line","x","y","text","enter","appendVerticalLine","date","storageArray"],"mappings":"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","file":"lineChartView.1ec88a83.js","sourceRoot":"..\\src","sourcesContent":["let svg, xAxis, yAxis;\r\nconst blDomainStorage = [];\r\nvar currentMonth; \r\n\r\nconst margin = {top:10, right: 30, bottom: 60, left: 60},\r\n  width = 800 - margin.left - margin.right,\r\n  height = 400 - margin.top - margin.bottom;\r\n\r\n/** Saves the checked Bundesländer to the array `blDomainStorage` \r\n  and visualises the chosen Bundesland.\r\n*/\r\nexport function VisualiseChosenBL(selectedBl, checked, selectedMonth){      \r\n  let foundBL = false;\r\n  let foundMonth = false;\r\n  console.log(selectedBl);\r\n  blDomainStorage.forEach(arr => {\r\n    if(selectedBl == arr[0]){\r\n      foundBL = true;\r\n      \r\n    } \r\n  })\r\n  if(selectedMonth == currentMonth) {\r\n    foundMonth = true;\r\n    currentMonth = selectedMonth;\r\n  }\r\n\r\n  // Checks if Bundesland is newly checked or if it already exists in blDomainStorage\r\n  if(foundBL == false || foundMonth == false){\r\n    console.log(\"In LineChart\");\r\n    if(foundBL ==true){\r\n      blDomainStorage.forEach((arr, i) => {\r\n        if(arr[0] == selectedBl) {\r\n         blDomainStorage.splice(i,1)\r\n        }\r\n      })\r\n    }\r\n \r\n    // Fetching the data of the newly selected Bundesland\r\n    fetchData(selectedBl, selectedMonth).then((data) => {\r\n      // To figure out the max y-value which is necessary to correctly display the data\r\n      const neededYValue = d3.scaleLinear().domain([0, d3.max(data, item => item.Infos.AnzahlFall)])\r\n\r\n      /** Sorts the array in increasing order.\r\n        The Bundesland with the smallest needed y-value comes first and the one with the highest comes last.\r\n      */\r\n      blDomainStorage.sort((a,b) => {\r\n        return a[1] - b[1];\r\n      })\r\n\r\n      /** Checks whether the last Bundesland in `blDomainStorage` still obtains the highest needed\r\n        y-value compared to the newly selected Bundesland. If the newly checked Bundesland has\r\n        more Covid cases and therefore needs a higher y-value the current axes are removed \r\n        and the updated ones are added.\r\n      */\r\n    \r\n      if(blDomainStorage.length == 0 || blDomainStorage[blDomainStorage.length-1][1] < neededYValue.domain()[1]){\r\n        console.log(blDomainStorage);\r\n        svg.select(\".y-axis\").remove(); // instead of deleting they should be updated,\r\n        svg.select(\".x-axis\").remove(); // but that seems more complicated\r\n        svg.select(\".case-line\").remove(); //removes existing vertical line\r\n        addAxes(data);\r\n      }\r\n    \r\n      // Stores the Bundesland and the highest y-value needed for that Bundesland\r\n      blDomainStorage.push([data[0].Infos.Bundesland, neededYValue.domain()[1]]);   \r\n\r\n      /** The curve of the newly selected Bundesland is added.\r\n        `blClassN` is necessary to give each curve a distinguishable class name.\r\n        It will be used to select the d3 element and then to update and delete it.\r\n      */\r\n      const blClassN = data[0].Infos.Bundesland\r\n      visualiseCurve(svg, data, xAxis, yAxis, blClassN, \"turquoise\");\r\n\r\n      // Circles of the already displayed Bundesländer are updated according to the new axis. \r\n      updateExistingCurvesCircles(blDomainStorage);\r\n    })\r\n    \r\n  } else if(!checked && foundBL == true) { // If Bundesland isn't selected but found in `blDomainStorage`\r\n\r\n      // Removes the curve and circles of the recently unselected Bundesland.\r\n      svg.select(\".curve.\"+selectedBl).remove();\r\n      svg.selectAll(\".circles.\"+selectedBl).remove();\r\n\r\n     /** Sorts the array in increasing order.\r\n        The Bundesland with the smallest needed y-value comes first and the one with the \r\n        highest comes last.\r\n      */\r\n      blDomainStorage.sort((a,b) => {\r\n        return a[1] - b[1];\r\n      })\r\n\r\n      // Removes the recently unselected Bundesland from `blDomainStorage`\r\n      blDomainStorage.forEach((arr, i) => {\r\n        if(arr[0] == selectedBl) {\r\n         blDomainStorage.splice(i,1)\r\n        }\r\n      })\r\n\r\n      /** Updates the axes, the existing curves and circles if the highest needed y-value \r\n        has changed after unselecting a Bundesland\r\n      */\r\n      if(yAxis.domain()[1] > blDomainStorage[blDomainStorage.length-1][1]){\r\n        fetchData(blDomainStorage[blDomainStorage.length-1][0], selectedMonth).then((data) => {\r\n          svg.select(\".y-axis\").remove(); \r\n          svg.select(\".x-axis\").remove(); \r\n          svg.select(\".case-line\").remove(); //removes existing vertical line\r\n          addAxes(data)\r\n          updateExistingCurvesCircles(blDomainStorage);            \r\n        }) \r\n      } \r\n    }\r\n}\r\n\r\n\r\nexport function InitializeSVG(){\r\n  svg = d3.select(\"#lineChartContainer\")\r\n          .append(\"div\")\r\n          .classed(\"svg-container\", true) \r\n          .append(\"svg\")\r\n          .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\r\n          .attr(\"viewBox\", \"0 0 600 400\")\r\n          .classed(\"svg-content-responsive\", true)\r\n          .append(\"g\")\r\n          .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);             \r\n}\r\n\r\n\r\nfunction fetchData(bundesland, selectedMonth){\r\n    return fetch(\r\n      `https://services7.arcgis.com/mOBPykOjAyBO2ZKk/arcgis/rest/services/RKI_COVID19/FeatureServer/0/query?where=Meldedatum%20%3E%3D%20TIMESTAMP%20%27${selectedMonth[0]}%2000%3A00%3A00%27%20AND%20Meldedatum%20%3C%3D%20TIMESTAMP%20%27${selectedMonth[1]}%2000%3A00%3A00%27%20AND%20Bundesland%20%3D%20%27${bundesland}%27&outFields=Bundesland,AnzahlFall,Meldedatum,IdBundesland&outSR=4326&f=json`,\r\n        {\r\n            method: 'GET'\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            /** `casesData` is the array where the fetched data will be stored in.\r\n              `feed` is the array of objects returned by the request.\r\n              Each array entry has the following schema\r\n              [attributes: {Bundesland: \"\", AnzahlFall: \"\", IdBundesland: \"\", Meldedatum: \"\"}]\r\n              By iterating through `feed` and pushing the objects to `casesData` one depth is removed so\r\n              the data can be handled more easily.\r\n            */\r\n            let casesData = [];\r\n            const feed = data.features;\r\n            feed.forEach(elem => {\r\n              casesData.push(elem.attributes);\r\n            });\r\n\r\n            return groupDataByDate(casesData)\r\n        });\r\n};\r\n\r\n  \r\n/** Groups the received data by date. After the grouping the data is sorted\r\n  datewise and returned as an array\r\n*/\r\nfunction groupDataByDate(casesData){\r\n  /** `dataEntries` is a new object and `currentValue` is the item of the array \r\n    currently looked at\r\n  */\r\n  const groupedReport = casesData.reduce((dataEntries, currentValue) => {\r\n    let day = new Date(currentValue['Meldedatum']);\r\n    \r\n    /** Within the first iteration of `reduce` `dataEntries` is undefined. \r\n      Consequently a new object entry with the `Meldedatum` as the key is being added to\r\n      `dataEntries`. Further information (Bundesland, IdBundesland, AnzahlFall) \r\n      are added as a value.       \r\n    */\r\n    if(dataEntries[day] !== undefined){\r\n      /** If a key with the `Meldedatum` already exists the number of cases are\r\n        summed up.\r\n      */\r\n      dataEntries[day].AnzahlFall = dataEntries[day].AnzahlFall + currentValue.AnzahlFall;  \r\n    } else {\r\n      dataEntries[day] = {\r\n        Bundesland: currentValue.Bundesland,\r\n        IdBundesland: currentValue.IdBundesland,\r\n        AnzahlFall: currentValue.AnzahlFall\r\n      };  \r\n    }        \r\n    return dataEntries\r\n  },{})\r\n\r\n  // `dataEntries` gets transformed into an array so it can be easily sorted by date  \r\n  let reportArr = [];\r\n  Object.entries(groupedReport).forEach(([key, value]) => {\r\n    reportArr.push({Meldedatum: key, Infos: value})\r\n  })\r\n  // Sorts the array containing the summed up cases by `Meldedatum`\r\n  reportArr.sort((a, b) => b.Meldedatum - a.Meldedatum)\r\n  return reportArr;\r\n}\r\n\r\n\r\nfunction addAxes(data){\r\n  /** The next 7 lines initialize and format the labels of the xAxis nicely.    \r\n    If there are too less dates will be repeated on the x-axis. To avoid that we have to create a function \r\n    for that edge case and work with xa.tickValues to set the labels manually.\r\n    xA.tickValues([new Date(data[0].Meldedatum), new Date(data[1].Meldedatum), new Date(data[2].Meldedatum)])\r\n  */\r\n  xAxis = d3.scaleTime()\r\n              .domain(d3.extent(data, item => new Date(item.Meldedatum)))\r\n              .range([0, width]);\r\n  const xA = d3.axisBottom(xAxis);\r\n  xA.tickSizeOuter(0); // removes the last tick on the xAxis\r\n  const parseDate = d3.timeFormat(\"%B %d, %Y\") //https://d3-wiki.readthedocs.io/zh_CN/master/Time-Scales/\r\n  xA.tickFormat(d => parseDate(d));\r\n \r\n  // Appends the xAxis\r\n  svg.append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${height})`)\r\n      .attr(\"class\", \"x-axis\")\r\n      .call(xA)\r\n      .selectAll(\"text\")\r\n      .attr(\"transform\", \"rotate(330)\") //rotates the labels of the x axis by \r\n      .style(\"text-anchor\", \"end\"); //makes sure that the end of the text string is anchored to the ticks\r\n\r\n  // Initializes and formats the yAxis\r\n  yAxis = d3.scaleLinear()\r\n      .domain([0, d3.max(data, item => item.Infos.AnzahlFall)])\r\n      .range([height, 0])\r\n      .nice(); //without that the highest tick of the y axis wouldn't be labelled\r\n  \r\n  // Appends the yAxis\r\n  svg.append(\"g\")\r\n      .call(d3.axisLeft(yAxis))\r\n      .attr(\"class\", \"y-axis\"); // Class added to be able to remove the axis;\r\n}\r\n\r\n\r\nfunction visualiseCurve(svg, formattedData, xAxis, yAxis, classN, color){\r\n  svg.append(\"path\")\r\n    .datum(formattedData)\r\n    .attr(\"fill\", \"none\")\r\n    .attr(\"id\", classN+\"-curve\")\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 1)\r\n    .attr(\"class\", \"curve\" + \" \" + classN) //necessary to add a specific class for every Bundesland shown\r\n    .attr(\"d\", d3.line()\r\n        .x(item => xAxis(new Date(item.Meldedatum)))\r\n        .y(item => yAxis(new Date(item.Infos.AnzahlFall)))\r\n    );\r\n\r\n  // Appends name of the Bundesland to the corresponding path\r\n  svg.append(\"text\")\r\n    .attr(\"x\", 5) // move the text from the start of the path\r\n    .attr(\"dy\", -10) // move the text up\r\n    .append(\"textPath\")\r\n      .attr(\"xlink:href\",\"#\"+classN+\"-curve\") // links the text to the element with the corresponding id, which was given to the path in the code block above\r\n      .text(formattedData[0].Infos.Bundesland);\r\n\r\n  // Appends circles to the path at the dates where data is returned\r\n  svg.selectAll(\"circles\")\r\n      .data(formattedData)\r\n      .enter()\r\n      .append(\"circle\")\r\n        .attr(\"class\", \"circles\" + \" \" + classN)\r\n        .attr(\"fill\", \"darkblue\")\r\n        .attr(\"stroke\", \"none\")\r\n        .attr(\"cx\", item => xAxis(new Date(item.Meldedatum)))\r\n        .attr(\"cy\", item => yAxis(new Date(item.Infos.AnzahlFall)))\r\n        .attr(\"r\", 2)\r\n}\r\n\r\n// Appends a vertical line at the selected date\r\nfunction appendVerticalLine(svg, xAxis, date, height){\r\n  d3.select(\".case-line\").remove(); //removes existing vertical line\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"class\", \"case-line\")\r\n    .attr(\"x1\", xAxis(date))  \r\n    .attr(\"y1\", 0)\r\n    .attr(\"x2\", xAxis(date))  \r\n    .attr(\"y2\", height)\r\n    .style(\"stroke-width\", 1)\r\n    .style(\"stroke\", \"darkblue\")\r\n    .style(\"fill\", \"none\");\r\n}\r\n\r\n\r\nfunction updateExistingCurvesCircles(storageArray){\r\n  storageArray.forEach((arr) => {\r\n    svg.select(\".curve.\"+ arr[0])\r\n      .attr(\"d\", d3.line()\r\n      .x(item => xAxis(new Date(item.Meldedatum)))\r\n      .y(item => yAxis(new Date(item.Infos.AnzahlFall)))\r\n    );\r\n\r\n    svg.selectAll(\".circles.\"+ arr[0])\r\n      .attr(\"cx\", item => xAxis(new Date(item.Meldedatum)))\r\n      .attr(\"cy\", item => yAxis(new Date(item.Infos.AnzahlFall))\r\n    );\r\n  })\r\n}\r\n"]}