{"version":3,"sources":["scripts/lineChartView.js"],"names":["exportDate","Date","choosen_bl","document","getElementById","bl","value","sel","addEventListener","window","location","reload","fetchDataCases","fetch","method","then","response","json","data","casesData","feed","features","forEach","elem","push","attributes","visualiseChart","groupDataByDate","groupedReport","reduce","dataEntries","currentValue","day","undefined","AnzahlFall","Bundesland","IdBundesland","reportArr","Object","entries","key","Meldedatum","Infos","sort","a","b","margin","top","right","bottom","left","width","height","svg","d3","select","append","classed","attr","xAxis","scaleTime","domain","extent","item","range","xA","axisBottom","tickSizeOuter","parseDate","timeFormat","tickFormat","d","call","selectAll","style","yAxis","scaleLinear","max","nice","axisLeft","curve","datum","line","x","y","labels","on","mouseEvent","target","date","appendVerticalLine","remove"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAG,IAAIC,IAAJ,EAAjB;eACeD;;AAEf,IAAME,UAAU,GAAIC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAApB;AACA,IAAMC,EAAE,GAAGH,UAAU,CAACI,KAAtB,EAEA;;AACA,IAAIC,GAAG,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAV;AACAG,GAAG,CAACC,gBAAJ,CAAsB,QAAtB,EAAgC,YAAY;AACzCC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACF,CAFD;;AAKA,SAASC,cAAT,GAAyB;AACrBC,EAAAA,KAAK,gSACqRR,EADrR,oFAED;AACIS,IAAAA,MAAM,EAAE;AADZ,GAFC,CAAL,CAKKC,IALL,CAKU,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,GALlB,EAMKF,IANL,CAMU,UAAAG,IAAI,EAAI;AACV;AACZ;AACA;AACA;AACA;AACA;AACA;AACY,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAMC,IAAI,GAAGF,IAAI,CAACG,QAAlB;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAa,UAAAC,IAAI,EAAI;AACnBJ,MAAAA,SAAS,CAACK,IAAV,CAAeD,IAAI,CAACE,UAApB;AACD,KAFD;AAIAC,IAAAA,cAAc,CAACC,eAAe,CAACR,SAAD,CAAhB,CAAd;AACH,GArBL;AAsBH;;AAAA;AAEDP,cAAc;AAEd;AACA;AACA;;AACA,SAASe,eAAT,CAAyBR,SAAzB,EAAmC;AACjC;AACF;AACA;AACE,MAAMS,aAAa,GAAGT,SAAS,CAACU,MAAV,CAAiB,UAACC,WAAD,EAAcC,YAAd,EAA+B;AACpE,QAAIC,GAAG,GAAG,IAAI/B,IAAJ,CAAS8B,YAAY,CAAC,YAAD,CAArB,CAAV;AAEA;AACJ;AACA;AACA;AACA;;AACI,QAAGD,WAAW,CAACE,GAAD,CAAX,KAAqBC,SAAxB,EAAkC;AAChC;AACN;AACA;AACMH,MAAAA,WAAW,CAACE,GAAD,CAAX,CAAiBE,UAAjB,GAA8BJ,WAAW,CAACE,GAAD,CAAX,CAAiBE,UAAjB,GAA8BH,YAAY,CAACG,UAAzE;AACD,KALD,MAKO;AACLJ,MAAAA,WAAW,CAACE,GAAD,CAAX,GAAmB;AACjBG,QAAAA,UAAU,EAAEJ,YAAY,CAACI,UADR;AAEjBC,QAAAA,YAAY,EAAEL,YAAY,CAACK,YAFV;AAGjBF,QAAAA,UAAU,EAAEH,YAAY,CAACG;AAHR,OAAnB;AAKD;;AACD,WAAOJ,WAAP;AACD,GArBqB,EAqBpB,EArBoB,CAAtB,CAJiC,CA2BjC;;AACA,MAAIO,SAAS,GAAG,EAAhB;AACAC,EAAAA,MAAM,CAACC,OAAP,CAAeX,aAAf,EAA8BN,OAA9B,CAAsC,gBAAkB;AAAA;AAAA,QAAhBkB,GAAgB;AAAA,QAAXlC,KAAW;;AACtD+B,IAAAA,SAAS,CAACb,IAAV,CAAe;AAACiB,MAAAA,UAAU,EAAED,GAAb;AAAkBE,MAAAA,KAAK,EAAEpC;AAAzB,KAAf;AACD,GAFD,EA7BiC,CAgCjC;;AACA+B,EAAAA,SAAS,CAACM,IAAV,CAAe,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,CAACJ,UAAF,GAAeG,CAAC,CAACH,UAA3B;AAAA,GAAf;AACA,SAAOJ,SAAP;AACD;;AAGD,SAASX,cAAT,CAAwBR,IAAxB,EAA8B;AAE5B,MAAI4B,MAAM,GAAG;AAACC,IAAAA,GAAG,EAAC,EAAL;AAASC,IAAAA,KAAK,EAAE,EAAhB;AAAoBC,IAAAA,MAAM,EAAE,EAA5B;AAAgCC,IAAAA,IAAI,EAAE;AAAtC,GAAb;AAAA,MACAC,KAAK,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KADnC;AAAA,MAEAI,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAFnC;AAKA,MAAII,GAAG,GAAGC,EAAE,CAACC,MAAH,CAAU,yBAAV,EACDC,MADC,CACM,KADN,EAEDC,OAFC,CAEO,eAFP,EAEwB,IAFxB,EAGDD,MAHC,CAGM,KAHN,EAIDE,IAJC,CAII,qBAJJ,EAI2B,eAJ3B,EAKDA,IALC,CAKI,SALJ,EAKe,aALf,EAMDD,OANC,CAMO,wBANP,EAMiC,IANjC,EAODD,MAPC,CAOM,GAPN,EAQDE,IARC,CAQI,WARJ,sBAQ8BZ,MAAM,CAACI,IARrC,eAQ8CJ,MAAM,CAACC,GARrD,OAAV;AAeA;AACF;AACA;AACA;AACA;;AACE,MAAMY,KAAK,GAAGL,EAAE,CAACM,SAAH,GACGC,MADH,CACUP,EAAE,CAACQ,MAAH,CAAU5C,IAAV,EAAgB,UAAA6C,IAAI;AAAA,WAAI,IAAI9D,IAAJ,CAAS8D,IAAI,CAACtB,UAAd,CAAJ;AAAA,GAApB,CADV,EAEGuB,KAFH,CAES,CAAC,CAAD,EAAIb,KAAJ,CAFT,CAAd;AAGA,MAAMc,EAAE,GAAGX,EAAE,CAACY,UAAH,CAAcP,KAAd,CAAX;AACAM,EAAAA,EAAE,CAACE,aAAH,CAAiB,CAAjB,EA/B4B,CA+BP;;AACrB,MAAMC,SAAS,GAAGd,EAAE,CAACe,UAAH,CAAc,WAAd,CAAlB,CAhC4B,CAgCiB;;AAC7CJ,EAAAA,EAAE,CAACK,UAAH,CAAc,UAAAC,CAAC;AAAA,WAAIH,SAAS,CAACG,CAAD,CAAb;AAAA,GAAf,EAjC4B,CAmC5B;;AACAlB,EAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACKE,IADL,CACU,WADV,yBACuCN,MADvC,QAEKoB,IAFL,CAEUP,EAFV,EAGKQ,SAHL,CAGe,MAHf,EAIKf,IAJL,CAIU,WAJV,EAIuB,aAJvB,EAIsC;AAJtC,GAKKgB,KALL,CAKW,aALX,EAK0B,KAL1B,EApC4B,CAyCM;AAElC;;AACA,MAAMC,KAAK,GAAGrB,EAAE,CAACsB,WAAH,GACTf,MADS,CACF,CAAC,CAAD,EAAIP,EAAE,CAACuB,GAAH,CAAO3D,IAAP,EAAa,UAAA6C,IAAI;AAAA,WAAIA,IAAI,CAACrB,KAAL,CAAWR,UAAf;AAAA,GAAjB,CAAJ,CADE,EAET8B,KAFS,CAEH,CAACZ,MAAD,EAAS,CAAT,CAFG,EAGT0B,IAHS,EAAd,CA5C4B,CA+Cf;AAEb;;AACAzB,EAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACKgB,IADL,CACUlB,EAAE,CAACyB,QAAH,CAAYJ,KAAZ,CADV;AAGA,MAAMK,KAAK,GAAG3B,GAAG,CAACG,MAAJ,CAAW,MAAX,EACGyB,KADH,CACS/D,IADT,EAEGwC,IAFH,CAEQ,MAFR,EAEgB,MAFhB,EAGGA,IAHH,CAGQ,QAHR,EAGkB,WAHlB,EAIGA,IAJH,CAIQ,cAJR,EAIwB,CAJxB,EAKGA,IALH,CAKQ,GALR,EAKaJ,EAAE,CAAC4B,IAAH,GACNC,CADM,CACJ,UAAApB,IAAI;AAAA,WAAIJ,KAAK,CAAC,IAAI1D,IAAJ,CAAS8D,IAAI,CAACtB,UAAd,CAAD,CAAT;AAAA,GADA,EAEN2C,CAFM,CAEJ,UAAArB,IAAI;AAAA,WAAIY,KAAK,CAAC,IAAI1E,IAAJ,CAAS8D,IAAI,CAACrB,KAAL,CAAWR,UAApB,CAAD,CAAT;AAAA,GAFA,CALb,CAAd;AAUA;AACF;AACA;AACA;AACA;;AACE,MAAMmD,MAAM,GAAG/B,EAAE,CAACmB,SAAH,CAAa,QAAb,CAAf;AAEAY,EAAAA,MAAM,CAACC,EAAP,CAAU,WAAV,EAAuB,UAACC,UAAD,EAAgB;AACrCjC,IAAAA,EAAE,CAACC,MAAH,CAAUgC,UAAU,CAACC,MAArB,EAA6Bd,KAA7B,CAAmC,QAAnC,EAA6C,SAA7C;AACD,GAFD;AAGAW,EAAAA,MAAM,CAACC,EAAP,CAAU,OAAV,EAAmB,UAACC,UAAD,EAAaE,IAAb,EAAsB;AACvCC,IAAAA,kBAAkB,CAACrC,GAAD,EAAMM,KAAN,EAAa8B,IAAb,EAAmBrC,MAAnB,CAAlB;AACApD,IAAAA,UAAU,GAAGyF,IAAb;AACD,GAHD;AAID,EAED;;;AACA,SAASC,kBAAT,CAA4BrC,GAA5B,EAAiCM,KAAjC,EAAwC8B,IAAxC,EAA8CrC,MAA9C,EAAqD;AACnDE,EAAAA,EAAE,CAACC,MAAH,CAAU,WAAV,EAAuBoC,MAAvB,GADmD,CAClB;;AAEjCtC,EAAAA,GAAG,CAACG,MAAJ,CAAW,MAAX,EACGE,IADH,CACQ,OADR,EACiB,UADjB,EAEGA,IAFH,CAEQ,IAFR,EAEcC,KAAK,CAAC8B,IAAD,CAFnB,EAGG/B,IAHH,CAGQ,IAHR,EAGc,CAHd,EAIGA,IAJH,CAIQ,IAJR,EAIcC,KAAK,CAAC8B,IAAD,CAJnB,EAKG/B,IALH,CAKQ,IALR,EAKcN,MALd,EAMGsB,KANH,CAMS,cANT,EAMyB,CANzB,EAOGA,KAPH,CAOS,QAPT,EAOmB,UAPnB,EAQGA,KARH,CAQS,MART,EAQiB,MARjB;AASD","file":"lineChartView.1ec88a83.js","sourceRoot":"..\\src","sourcesContent":["/** `date` is set in the event handler added to the ticks of the xAxis. \r\n  It contains the selected date which should be used for the treemap.\r\n  To import the clicked date use `import date from './lineChartView.js' in the treemap file`.\r\n  Make sure that the type of the treemap file is set to `module` in the index.html file, e.g.:\r\n   <script type=\"module\" src=\"scripts/values.js\" ></script>\r\n  */\r\nlet exportDate = new Date();\r\nexport default exportDate;\r\n\r\nconst choosen_bl  = document.getElementById(\"bundesländer\");\r\nconst bl = choosen_bl.value;\r\n\r\n//TODO replace the eventListener\r\nlet sel = document.getElementById('bundesländer');\r\nsel.addEventListener (\"change\", function () {\r\n   window.location.reload();\r\n});\r\n\r\n\r\nfunction fetchDataCases(){\r\n    fetch(\r\n      `https://services7.arcgis.com/mOBPykOjAyBO2ZKk/arcgis/rest/services/RKI_COVID19/FeatureServer/0/query?where=Meldedatum%20%3E%3D%20TIMESTAMP%20%272020-12-01%2000%3A00%3A00%27%20AND%20Meldedatum%20%3C%3D%20TIMESTAMP%20%272020-12-15%2000%3A00%3A00%27%20AND%20Bundesland%20%3D%20%27${bl}%27&outFields=Bundesland,AnzahlFall,Meldedatum,IdBundesland&outSR=4326&f=json`,\r\n        {\r\n            method: 'GET'\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            /** `casesData` is the array where the fetched data will be stored in.\r\n              `feed` is the array of objects returned by the request.\r\n              Each array entry has the following schema\r\n              [attributes: {Bundesland: \"\", AnzahlFall: \"\", IdBundesland: \"\", Meldedatum: \"\"}]\r\n              By iterating through `feed` and pushing the objects to `casesData` one depth is removed so\r\n              the data can be handled more easily.\r\n            */\r\n            let casesData = [];\r\n            const feed = data.features;\r\n            feed.forEach(elem => {\r\n              casesData.push(elem.attributes);\r\n            });\r\n\r\n            visualiseChart(groupDataByDate(casesData));\r\n        });\r\n};\r\n\r\nfetchDataCases();\r\n  \r\n/** Groups the received data by date. After the grouping the data is sorted\r\n  datewise and returned as an array\r\n*/\r\nfunction groupDataByDate(casesData){\r\n  /** `dataEntries` is a new object and `currentValue` is the item of the array \r\n    currently looked at\r\n  */\r\n  const groupedReport = casesData.reduce((dataEntries, currentValue) => {\r\n    let day = new Date(currentValue['Meldedatum']);\r\n    \r\n    /** Within the first iteration of `reduce` `dataEntries` is undefined. \r\n      Consequently a new object entry with the `Meldedatum` as the key is being added to\r\n      `dataEntries`. Further information (Bundesland, IdBundesland, AnzahlFall) \r\n      are added as a value.       \r\n    */\r\n    if(dataEntries[day] !== undefined){\r\n      /** If a key with the `Meldedatum` already exists the number of cases are\r\n        summed up.\r\n      */\r\n      dataEntries[day].AnzahlFall = dataEntries[day].AnzahlFall + currentValue.AnzahlFall;  \r\n    } else {\r\n      dataEntries[day] = {\r\n        Bundesland: currentValue.Bundesland,\r\n        IdBundesland: currentValue.IdBundesland,\r\n        AnzahlFall: currentValue.AnzahlFall\r\n      };  \r\n    }        \r\n    return dataEntries\r\n  },{})\r\n\r\n  // `dataEntries` gets transformed into an array so it can be easily sorted by date  \r\n  let reportArr = [];\r\n  Object.entries(groupedReport).forEach(([key, value]) => {\r\n    reportArr.push({Meldedatum: key, Infos: value})\r\n  })\r\n  // Sorts the array containing the summed up cases by `Meldedatum`\r\n  reportArr.sort((a, b) => b.Meldedatum - a.Meldedatum)\r\n  return reportArr;\r\n}\r\n\r\n\r\nfunction visualiseChart(data) {\r\n  \r\n  var margin = {top:10, right: 30, bottom: 60, left: 60},\r\n  width = 600 - margin.left - margin.right,\r\n  height = 400 - margin.top - margin.bottom;\r\n\r\n  \r\n  var svg = d3.select(\"#visualisationContainer\")\r\n          .append(\"div\")\r\n          .classed(\"svg-container\", true) \r\n          .append(\"svg\")\r\n          .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\r\n          .attr(\"viewBox\", \"0 0 600 400\")\r\n          .classed(\"svg-content-responsive\", true)\r\n          .append(\"g\")\r\n          .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n\r\n              \r\n\r\n             \r\n\r\n\r\n  /** The next 7 lines initialize and format the labels of the xAxis nicely.    \r\n    If there are too less dates will be repeated on the x-axis. To avoid that we have to create a function \r\n    for that edge case and work with xa.tickValues to set the labels manually.\r\n    xA.tickValues([new Date(data[0].Meldedatum), new Date(data[1].Meldedatum), new Date(data[2].Meldedatum)])\r\n  */\r\n  const xAxis = d3.scaleTime()\r\n                  .domain(d3.extent(data, item => new Date(item.Meldedatum)))\r\n                  .range([0, width]);\r\n  const xA = d3.axisBottom(xAxis);\r\n  xA.tickSizeOuter(0); // removes the last tick on the xAxis\r\n  const parseDate = d3.timeFormat(\"%B %d, %Y\") //https://d3-wiki.readthedocs.io/zh_CN/master/Time-Scales/\r\n  xA.tickFormat(d => parseDate(d));\r\n \r\n  // Appends the xAxis\r\n  svg.append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${height})`)\r\n      .call(xA)\r\n      .selectAll(\"text\")\r\n      .attr(\"transform\", \"rotate(330)\") //rotates the labels of the x axis by \r\n      .style(\"text-anchor\", \"end\"); //makes sure that the end of the text string is anchored to the ticks\r\n\r\n  // Initializes and formats the yAxis\r\n  const yAxis = d3.scaleLinear()\r\n      .domain([0, d3.max(data, item => item.Infos.AnzahlFall)])\r\n      .range([height, 0])\r\n      .nice(); //without that the highest tick of the y axis wouldn't be labelled\r\n  \r\n  // Appends the yAxis\r\n  svg.append(\"g\")\r\n      .call(d3.axisLeft(yAxis));\r\n\r\n  const curve = svg.append(\"path\")\r\n                  .datum(data)\r\n                  .attr(\"fill\", \"none\")\r\n                  .attr(\"stroke\", \"turquoise\")\r\n                  .attr(\"stroke-width\", 1)\r\n                  .attr(\"d\", d3.line()\r\n                      .x(item => xAxis(new Date(item.Meldedatum)))\r\n                      .y(item => yAxis(new Date(item.Infos.AnzahlFall)))\r\n                  );\r\n\r\n  /** Selects all the labels on the xAxis. \r\n    The cursor becomes a pointer when moving the mouse over the xAxis labels.\r\n    When clicking on one label the function `appendVerticalLine` is being called \r\n    and the selected `date` set so it can be exported. (See top of this file)\r\n  */\r\n  const labels = d3.selectAll('g.tick') \r\n  \r\n  labels.on(\"mouseover\", (mouseEvent) => {\r\n    d3.select(mouseEvent.target).style(\"cursor\", \"pointer\"); \r\n  });\r\n  labels.on(\"click\", (mouseEvent, date) => {\r\n    appendVerticalLine(svg, xAxis, date, height)\r\n    exportDate = date;\r\n  })  \r\n}\r\n\r\n// Appends a vertical line at the selected date\r\nfunction appendVerticalLine(svg, xAxis, date, height){\r\n  d3.select(\".caseLine\").remove(); //removes existing vertical line\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"class\", \"caseLine\")\r\n    .attr(\"x1\", xAxis(date))  \r\n    .attr(\"y1\", 0)\r\n    .attr(\"x2\", xAxis(date))  \r\n    .attr(\"y2\", height)\r\n    .style(\"stroke-width\", 1)\r\n    .style(\"stroke\", \"darkblue\")\r\n    .style(\"fill\", \"none\");\r\n}"]}