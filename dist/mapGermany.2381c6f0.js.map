{"version":3,"sources":["scripts/mapGermany.js"],"names":["colorBackground","colorText","blHoovered","labelBlArray","clickedBlArray","LoadMap","d3","json","then","geojson","width","height","svg","select","classed","append","attr","projection","geoMercator","fitSize","path","geoPath","color","scaleOrdinal","schemeBlues","slice","offset","selectAll","data","features","enter","d","properties","GEN","i","bl","undefined","text","textBool","forEach","includes","push","on","highlightBl","resetBlColor","clickEvent","style","document","getElementById","display","_groups","id","isBlClicked","clickedBl","clickedBool","length","classList","add","index","indexOf","splice","remove","alert"],"mappings":"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","file":"mapGermany.2381c6f0.js","sourceRoot":"..\\src","sourcesContent":["let colorBackground, colorText, blHoovered;\r\n\r\n// `labelBlArray` stores the names of all the Bundesländer which are appended to the svg\r\nlet labelBlArray = [];\r\n\r\n// `clickedBlArray` stores the names of all the Bundesländer which have been selected via click\r\nlet clickedBlArray = [];\r\n\r\n\r\nexport function LoadMap(){\r\n\r\n\t// Source http://opendatalab.de/projects/geojson-utilities/\r\n\td3.json('../src/data/bundeslaender.geojson').then((geojson)=>{\r\n\t\t\t\t\r\n\t\tconst width = 900;\r\n\t\tconst height =500;\r\n\r\n\t\tconst svg = d3  \r\n\t\t\t.select(\"#mapGermany\")\r\n\t\t\t.classed(\"svg-container\", true)   \r\n\t\t\t.append(\"svg\")\r\n\t\t\t.attr(\"class\", \"map-germany\")\r\n\t\t\t//.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\r\n          \t//.attr(\"viewBox\", \"0 0 600 400\")\r\n          \t//.classed(\"svg-content-responsive\", true)\r\n\t\t\t.attr(\"id\", \"svgMap\")\r\n\t\t\t.attr(\"width\", width)  \r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\tconst projection = d3.geoMercator();\r\n\t\tprojection.fitSize([width, height],geojson)\r\n\r\n\t\r\n\t\tconst path = d3.geoPath().projection(projection);\r\n\t\tconst color = d3.scaleOrdinal(d3.schemeBlues[9].slice(2,9));\r\n\t\tlet offset = geojson.offset;\r\n\t\t\r\n\t\tsvg.selectAll(\"path\")\r\n\t\t\t.data(geojson.features)\r\n\t\t\t.enter()  \r\n\t\t\t.append(\"path\")  \r\n\t\t\t.attr(\"d\", path) \r\n\t\t\t.attr(\"class\", d => d.properties.GEN) // Sets the name of the Bundesland as the classname\r\n\t\t\t.attr(\"fill\", (d, i) => color(i))  \r\n\t\t\t.attr(\"stroke\", \"#FFF\")  \r\n\t\t\t.attr(\"stroke-width\", 0.5);  \r\n\t\t\t\r\n\r\n\t\tsvg.append(\"g\")  \r\n\t\t\t.selectAll(\"text\")  \r\n\t\t\t.data(geojson.features)  \r\n\t\t\t.enter()  \r\n\t\t\t.append(\"text\")  \r\n\t\t\t.attr(\"text-anchor\", \"middle\") \r\n\t\t\t.attr(\"font-size\", 11)\r\n\t\t\t.attr(\"id\", d => d.properties.GEN) // Sets the name of the Bundesland as the ID\r\n\t\t\t.attr(\"x\", d => {\r\n\t\t\t\tconst bl = d.properties.GEN;\r\n\t\t\t\tif(offset[bl] != undefined) {\r\n\t\t\t\t\treturn projection(offset[bl])[0];\t\r\n\t\t\t\t}\r\n\t\t\t})  \r\n\t\t\t.attr(\"y\", d => {\r\n\t\t\t\tconst bl = d.properties.GEN;\r\n\t\t\t\tif(offset[bl] != undefined) return projection(offset[bl])[1];\r\n\t\t\t})\r\n\t\t\t.text(d => {\r\n\t\t\t\t// Only fill the text if there is no text for the Bundesland yet\r\n\t\t\t\tlet textBool = false;\r\n\t\t\t\tlabelBlArray.forEach(bl => {\r\n\t\t\t\t\tif(bl === d.properties.GEN || d.properties.GEN.includes(\"Bodensee\")) {\r\n\t\t\t\t\t\ttextBool = true; // Bodensee needs to be mentioned explicitly\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif(textBool === false) {\r\n\t\t\t\t\tlabelBlArray.push(d.properties.GEN)\t\r\n\t\t\t\t\treturn d.properties.GEN;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t})\r\n\t\t\t.on(\"mouseover\", highlightBl)\r\n\t\t\t.on(\"mouseout\", resetBlColor)\r\n\t\t\t.on(\"click\", clickEvent)\r\n\t\t\t.style(\"cursor\", \"pointer\");  \r\n\t});\r\n\r\n\t// Hide map\r\n\tdocument.getElementById('mapGermany').style.display = 'none'\r\n}\r\n\r\n\r\nfunction highlightBl(){\r\n\r\n\t// Get the name of the Bundesland currently hoovered over via the ID of the HTML element\r\n\tblHoovered = d3.select(this)._groups[0][0].id\r\n\t\r\n\t// The name of the Bundesland was given as a class name to each path and with its help gets filled now\r\n\tcolorBackground = d3.select(\".\"+blHoovered).attr(\"fill\");\r\n\td3.select(\".\"+blHoovered).attr(\"fill\", \"#009688\");\r\n\r\n\tcolorText = d3.select(this).attr(\"fill\");\r\n\td3.select(this)\r\n\t\t.attr(\"fill\", \"white\")\r\n\t\t.attr(\"font-weight\", \"bold\");\t\t\r\n}\r\n\r\nfunction resetBlColor(){\r\n\t// Check if the hovered over Bundesland was clicked\r\n\tlet isBlClicked = false;\r\n\tclickedBlArray.forEach( bl => {\r\n\t\tif(this.id === bl){\r\n\t\t\tisBlClicked = true;\r\n\t\t}\r\n\t})\r\n\t// If it wasn't clicked its color is reset\r\n\tif(isBlClicked === false){\r\n\t\td3.select(\".\"+blHoovered).attr(\"fill\", colorBackground);\r\n\t\td3.select(this)\r\n\t\t.attr(\"fill\", colorText)\r\n\t\t.attr(\"font-weight\", \"normal\");\t\r\n\t}\r\n}\r\n\r\nfunction clickEvent(){\r\n\tconst clickedBl = d3.select(this)._groups[0][0].id;\r\n\r\n\t// Check if a Bundesland has already been clicked\r\n\tlet clickedBool = false;\r\n\t\r\n\tclickedBlArray.forEach( bl => {\r\n\t\tif(bl === clickedBl){\r\n\t\t\tclickedBool = true;\r\n\t\t}\r\n\t})\r\n\r\n\t// If the clicked on Bundesland wasn't clicked before, it is marked and added to `clickedBlArray`\r\n\tif(clickedBool === false & clickedBlArray.length <= 3) {\r\n\t\td3.select(\".\"+d3.select(this)._groups[0][0].id)\r\n\t\t\t.attr(\"fill\", \"#009688\")\r\n\r\n\t\tclickedBlArray.push(blHoovered);\r\n\t\t// Necessary to get the selected Bundesland in main.js\r\n\t\td3.select(this)._groups[0][0].classList.add('selected-bl'); \r\n\t} \r\n\t/** If it has been clicked before the selection is revoked by changing the stroke coloring and removing the \r\n\t\tBundesland from the array.\r\n\t*/\r\n\telse if(clickedBool === true){\t\r\n\t\td3.select(\".\"+d3.select(this)._groups[0][0].id)\r\n\t\t\t.attr(\"stroke\", \"white\")\r\n\t\t\t.attr(\"fill\", colorBackground)\r\n\t\t\t.attr(\"stroke-width\", 0.5) \r\n\r\n\t\tconst index = clickedBlArray.indexOf(clickedBl);\r\n\t\tclickedBlArray.splice(index, 1);\r\n\t\t// Necessary to get the selected Bundesland in main.js\r\n\t\td3.select(this)._groups[0][0].classList.remove('selected-bl'); \r\n\t} \r\n\t// Alert when more when the user wants to select more than 4 Bundesländer. This would get too messy for the line chart.\r\n\telse if(clickedBlArray.length == 4){\r\n\t\talert(\"Du hast bereits 5 Bundesländer ausgewählt. Entferne eins per Klick, um ein neues auswählen zu können.\")\r\n\t}\r\n}"]}