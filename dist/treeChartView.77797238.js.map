{"version":3,"sources":["scripts/treeChartView.js"],"names":["displaymobilitydata","param","mobilityData","temp","d3","csv","then","data","forEach","element","push","country","m","div","month","d","day","s","undefined","parseFloat","toFixed","createTreeChart","select","remove","margin","top","right","bottom","left","width","height","svg","append","attr","groupedData","reduce","k","v","hgroup","hierarchy","Germany","sum","treemap","size","padding","color","scale","linear","domain","range","selectAll","leaves","enter","id","x0","y0","x1","y1","style","text","region"],"mappings":"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","file":"treeChartView.77797238.js","sourceRoot":"..\\src","sourcesContent":["function displaymobilitydata(param=\"driving\"){\r\n    let mobilityData = [];\r\n    var temp = [];\r\n    d3.csv('../src/data/applemobilitytrends.csv').then(function(data){\r\n        data.forEach(element => temp.push(element));\r\n        temp.forEach(function(element) {\r\n            if (element.country == \"Germany\" && element[\"sub-region\"] == \"\" && element[\"transportation_type\"]==param) mobilityData.push(element);\r\n        });\r\n\r\n        //calculate average value for every month\r\n        for (let m=1; m<13; m++){\r\n\r\n            //since each month has a different number of days and the data has some gaps for two days we need to store the individual number of days each month in the variable div\r\n            let div = 0;\r\n\r\n            // if clause to make the month valuefitting to the formatting in the dataset\r\n            if (m<10) month=\"0\"+m;\r\n            else month=m;\r\n\r\n            for (let d=1; d<32; d++){\r\n\r\n                // if clause to make the day value fitting to the formatting in the dataset\r\n                if (d<10) day=\"0\"+d;\r\n                else day=d;\r\n\r\n                //format of the date stored in a variable\r\n                let s = \"2020-\"+month+\"-\"+day;\r\n\r\n                mobilityData.forEach(function(element){\r\n                    if (element[s] !== undefined && element[s] !== \"\") {\r\n                        div++;\r\n                        if (element[month]== null) element[month]= element[s];\r\n\r\n                        else {element[month]= parseFloat(element[month]) + parseFloat(element[s]);}\r\n                    }\r\n                });\r\n            }\r\n\r\n            //div needs to be divided by 16 since it gets count up in the forEach loop for all 16 German regions\r\n            div = div/16;\r\n\r\n            mobilityData.forEach(function(element){\r\n                element[month]=(parseFloat(element[month])/div).toFixed(2);\r\n            });\r\n        }\r\n\r\n        //generate TreeChart from the provided Dateset\r\n        createTreeChart(mobilityData)\r\n    });\r\n};\r\n\r\ndisplaymobilitydata();\r\n\r\nfunction createTreeChart(data){\r\n\r\n    //in case new treemap shall be loaded, the one before gets removed\r\n    d3.select(\"#treemapwrapper\").select(\"svg\").remove();\r\n\r\n    var margin = {top: 20, right: 30, bottom: 30, left: 40},\r\n        width = 800 - margin.left - margin.right,\r\n        height = 600 - margin.top - margin.bottom;\r\n\r\n    var svg = d3.select(\"#treemapwrapper\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", width + margin.left + margin.right)\r\n        .attr(\"height\", height + margin.top + margin.bottom)\r\n        .append(\"g\")\r\n        .attr(\"transform\", \"translate(\" +margin.left + \",\" + margin.top + \")\");\r\n\r\n    //Group the data by \"Germany\", so our tree has a root node\r\n    let groupedData = data.reduce((k, v)=> {\r\n        k[v.country] = [...k[v.country] || [], v];\r\n        return k;\r\n        }, {});\r\n\r\n\r\n    //Transform the data grouped by \"Germany\" into a hiearchy by usind d3.js hierachy (first param is root, second param is child nodes\r\n    var hgroup = d3.hierarchy(groupedData, function(d){return d.Germany})\r\n        .sum((d) => {return d[\"12\"]});\r\n\r\n    // Then d3.treemap computes the position of each element of the hierarchy\r\n    // The coordinates are added to the root object above\r\n   const treemap= d3.treemap()\r\n       .size([width, height])\r\n       .padding(4)\r\n      (hgroup)\r\n\r\n\r\n    // Determine the color of each field\r\n    // Explanation from https://stackoverflow.com/questions/42546344/how-to-apply-specific-colors-to-d3-js-map-based-on-data-values?rq=1\r\n    var color= d3.scale.linear().domain([70, 100]).range([\"blue\", \"green\"]);\r\n\r\n    // use this information to add rectangles:\r\n    svg\r\n        .selectAll(\"rect\")\r\n        .data(treemap.leaves())\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"id\", (d) =>{return d.id;})\r\n        .attr('x', function (d) { return d.x0; })\r\n        .attr('y', function (d) { return d.y0})\r\n        .attr('width', function (d) { return d.x1 - d.x0; })\r\n        .attr('height', function (d) { return d.y1 - d.y0})\r\n        .style(\"fill\", function(d) {\r\n            return color(d.data[\"05\"]);});\r\n\r\n    // and to add the text labels\r\n    svg\r\n        .selectAll(\"text\")\r\n        .data(treemap.leaves())\r\n        .enter()\r\n        .append(\"text\")\r\n        .attr(\"x\", function(d){ return d.x0+20})    // +10 to adjust position (more right)\r\n        .attr(\"y\", function(d){ return d.y0+30})    // +20 to adjust position (lower)\r\n        .text(function(d){ return d.data.region +\"\"+ d.data[\"05\"]+\"%\"})\r\n        .attr(\"font-size\", \"16px\")\r\n        .attr(\"fill\", \"white\")\r\n}"]}